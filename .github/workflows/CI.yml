name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

env:
  ProjectName: get_cnip
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true

    - name: Install cross
      run: cargo install cross

    - name: Build
      run: cross build --release --target="${{ matrix.target }}"

    - name: strip
      continue-on-error: true
      run: strip target/${{ matrix.target }}/release/${{ env.ProjectName }}

    - name: Run UPX
      continue-on-error: true
      uses: crazy-max/ghaction-upx@v1
      with:
        files: target/${{ matrix.target }}/release/${{ env.ProjectName }}
        args: --best --ultra-brute

    - name: Upload
      continue-on-error: true
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ProjectName }}.${{ matrix.target }}
        path: target/${{ matrix.target }}/release/${{ env.ProjectName }}

    - name: Get tag
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      id: tag
      uses: dawidd6/action-get-tag@v1

    - name: Package
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      shell: pwsh
      run: 7z a -mx9 "build/release/$env:ProjectName-${{ steps.tag.outputs.tag }}.${{ matrix.target }}.7z" "./target/${{ matrix.target }}/release/${{ env.ProjectName }}"

    - name: Create a new GitHub release if a new tag is pushed
      uses: softprops/action-gh-release@v1
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: v${{ steps.tag.outputs.tag }}
        prerelease: true
        draft: false
        files: build/release/*

  build-windows:
    runs-on: windows-latest
    env:
      RUST_BACKTRACE: full
      TARGET : x86_64-pc-windows-msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true

    - name: Build
      run: cargo build --release --target="${{ env.TARGET }}"

    - name: Run UPX
      continue-on-error: true
      uses: crazy-max/ghaction-upx@v1
      with:
        files: target/${{ env.TARGET }}/release/${{ env.ProjectName }}.exe
        args: --best --ultra-brute

    - name: Upload
      continue-on-error: true
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ProjectName }}.${{ env.TARGET }}
        path: target/${{ env.TARGET }}/release/${{ env.ProjectName }}.exe

    - name: Get tag
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      id: tag
      uses: dawidd6/action-get-tag@v1

    - name: Package
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      shell: pwsh
      run: 7z a -mx9 "build/release/$env:ProjectName-${{ steps.tag.outputs.tag }}.${{ env.TARGET }}.7z" "./target/${{ env.TARGET }}/release/${{ env.ProjectName }}.exe"

    - name: Create a new GitHub release if a new tag is pushed
      uses: softprops/action-gh-release@v1
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: v${{ steps.tag.outputs.tag }}
        prerelease: true
        draft: false
        files: build/release/*
        body: |
          ## 更新日志：
          * 这是 GitHub Actions 自动化部署，更新日志应该很快会手动更新
